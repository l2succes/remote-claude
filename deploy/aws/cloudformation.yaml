AWSTemplateFormatVersion: '2010-09-09'
Description: 'Remote Claude Self-Hosted Infrastructure'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: remote-claude

  InstanceType:
    Description: EC2 instance type for ECS cluster
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge

  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in your ECS cluster

  MaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of instances in the Auto Scaling group

  EnableSpotInstances:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Use spot instances for cost savings

  SpotMaxPrice:
    Type: String
    Default: ''
    Description: Maximum spot price (leave empty for on-demand price)

  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Mappings:
  # ECS-optimized AMI IDs (update these regularly)
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0c94c73a3eb7a2cac
    us-west-2:
      AMIID: ami-0d927e3ac55b3f3b4
    eu-west-1:
      AMIID: ami-0b5aa26a6e4192705

Conditions:
  UseSpotInstances: !Equals [!Ref EnableSpotInstances, 'true']
  HasSpotPrice: !Not [!Equals [!Ref SpotMaxPrice, '']]

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Restrict this in production
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-sg

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # ECS Instance Role
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECSInstancePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # ECS Task Role (for the actual tasks)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ClaudeTaskPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${TaskResultsBucket}/*'
                  - !Sub 'arn:aws:s3:::${TaskResultsBucket}'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Launch Template for EC2 instances
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-ecs-launch-template
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
            echo ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true >> /etc/ecs/ecs.config
            
            # Install required tools
            yum install -y aws-cli jq git docker
            
            # Install Node.js 20
            curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
            yum install -y nodejs
            
            # Install Claude Code CLI globally
            npm install -g @anthropic-ai/claude-code

  # Auto Scaling Group
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: 0
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: !If [UseSpotInstances, 0, 100]
          SpotMaxPrice: !If [HasSpotPrice, !Ref SpotMaxPrice, !Ref 'AWS::NoValue']
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ECSLaunchTemplate
            Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-instance
          PropagateAtLaunch: true

  # S3 Bucket for task results
  TaskResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-task-results-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: 30

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}
      RetentionInDays: 7

  # ECS Task Definition
  ClaudeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-claude-task
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: claude-runner
          Image: public.ecr.aws/anthropic/claude-code:latest  # This would need to be built
          Memory: 4096
          Cpu: 2048
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: claude
          Environment:
            - Name: TASK_RESULTS_BUCKET
              Value: !Ref TaskResultsBucket
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region

  # SSM Parameters for configuration
  ClusterNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/ecs/cluster-name
      Type: String
      Value: !Ref ECSCluster

  SubnetIdsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/ecs/subnet-ids
      Type: StringList
      Value: !Join
        - ','
        - - !Ref PublicSubnet1
          - !Ref PublicSubnet2

  SecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/ecs/security-group-id
      Type: String
      Value: !Ref ECSSecurityGroup

  TaskDefinitionArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/ecs/task-definition-arn
      Type: String
      Value: !Ref ClaudeTaskDefinition

  TaskRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/ecs/task-role-arn
      Type: String
      Value: !GetAtt ECSTaskRole.Arn

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}-cluster-name

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-vpc-id

  SubnetIds:
    Description: Subnet IDs for ECS tasks
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-subnet-ids

  SecurityGroupId:
    Description: Security Group ID for ECS tasks
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-security-group-id

  TaskDefinitionArn:
    Description: ECS Task Definition ARN
    Value: !Ref ClaudeTaskDefinition
    Export:
      Name: !Sub ${EnvironmentName}-task-definition-arn

  TaskResultsBucket:
    Description: S3 Bucket for task results
    Value: !Ref TaskResultsBucket
    Export:
      Name: !Sub ${EnvironmentName}-results-bucket

  ConfigCommand:
    Description: Command to configure rclaude CLI
    Value: !Sub |
      rclaude config ec2 --region ${AWS::Region} && \
      rclaude config backend ecs-ec2 && \
      echo "ECS_CLUSTER_NAME=${ECSCluster}" >> ~/.rclaude/config.env && \
      echo "ECS_SUBNET_IDS=${PublicSubnet1},${PublicSubnet2}" >> ~/.rclaude/config.env && \
      echo "ECS_SECURITY_GROUP_ID=${ECSSecurityGroup}" >> ~/.rclaude/config.env